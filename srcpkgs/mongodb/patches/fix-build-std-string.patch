--- src/mongo/shell/bench.cpp.orig	2017-07-06 09:07:04.718310572 +0000
+++ src/mongo/shell/bench.cpp	2017-07-06 09:12:39.849290597 +0000
@@ -674,7 +674,7 @@
     invariant(bsonTemplateEvaluator.setId(_id) == BsonTemplateEvaluator::StatusSuccess);
 
     if (_config->username != "") {
-        string errmsg;
+        std::string errmsg;
         if (!conn->auth("admin", _config->username, _config->password, errmsg)) {
             uasserted(15931, "Authenticating to connection for _benchThread failed: " + errmsg);
         }
@@ -918,7 +918,7 @@
 
                             if (!result["err"].eoo() && result["err"].type() == String &&
                                 (_config->throwGLE || op.throwGLE))
-                                throw DBException((string) "From benchRun GLE" +
+                                throw DBException((std::string) "From benchRun GLE" +
                                                       causedBy(result["err"].String()),
                                                   result["code"].eoo() ? 0 : result["code"].Int());
                         }
@@ -984,7 +984,7 @@
 
                             if (!result["err"].eoo() && result["err"].type() == String &&
                                 (_config->throwGLE || op.throwGLE))
-                                throw DBException((string) "From benchRun GLE" +
+                                throw DBException((std::string) "From benchRun GLE" +
                                                       causedBy(result["err"].String()),
                                                   result["code"].eoo() ? 0 : result["code"].Int());
                         }
@@ -1031,7 +1031,7 @@
 
                             if (!result["err"].eoo() && result["err"].type() == String &&
                                 (_config->throwGLE || op.throwGLE))
-                                throw DBException((string) "From benchRun GLE " +
+                                throw DBException((std::string) "From benchRun GLE " +
                                                       causedBy(result["err"].String()),
                                                   result["code"].eoo() ? 0 : result["code"].Int());
                         }
@@ -1133,7 +1133,7 @@
     try {
         std::unique_ptr<DBClientBase> conn(_config->createConnection());
         if (!_config->username.empty()) {
-            string errmsg;
+            std::string errmsg;
             if (!conn->auth("admin", _config->username, _config->password, errmsg)) {
                 uasserted(15932, "Authenticating to connection for benchThread failed: " + errmsg);
             }
@@ -1165,7 +1165,7 @@
         std::unique_ptr<DBClientBase> conn(_config->createConnection());
         // Must authenticate to admin db in order to run serverStatus command
         if (_config->username != "") {
-            string errmsg;
+            std::string errmsg;
             if (!conn->auth("admin", _config->username, _config->password, errmsg)) {
                 uasserted(
                     16704,
@@ -1201,7 +1201,7 @@
     {
         std::unique_ptr<DBClientBase> conn(_config->createConnection());
         if (_config->username != "") {
-            string errmsg;
+            std::string errmsg;
             // this can only fail if admin access was revoked since start of run
             if (!conn->auth("admin", _config->username, _config->password, errmsg)) {
                 uasserted(
--- src/mongo/db/dbwebserver.cpp.orig	2017-06-27 19:02:43.000000000 +0000
+++ src/mongo/db/dbwebserver.cpp	2017-07-06 09:27:54.070236105 +0000
@@ -65,6 +65,7 @@
 namespace mongo {
 
 using std::map;
+using std::string;
 using std::stringstream;
 using std::vector;
 
--- src/mongo/db/matcher/expression_leaf.cpp.orig	2017-06-27 19:02:43.000000000 +0000
+++ src/mongo/db/matcher/expression_leaf.cpp	2017-07-06 09:31:40.097222633 +0000
@@ -202,7 +202,7 @@
 }
 
 void ComparisonMatchExpression::serialize(BSONObjBuilder* out) const {
-    string opString = "";
+    std::string opString = "";
     switch (matchType()) {
         case LT:
             opString = "$lt";
@@ -884,7 +884,7 @@
 }
 
 void BitTestMatchExpression::serialize(BSONObjBuilder* out) const {
-    string opString = "";
+    std::string opString = "";
 
     switch (matchType()) {
         case BITS_ALL_SET:
--- src/mongo/db/repl/master_slave.cpp.orig	2017-06-27 19:02:43.000000000 +0000
+++ src/mongo/db/repl/master_slave.cpp	2017-07-06 09:36:53.549203950 +0000
@@ -78,6 +78,7 @@
 using std::max;
 using std::min;
 using std::set;
+using std::string;
 using std::stringstream;
 using std::unique_ptr;
 using std::vector;
--- src/mongo/util/net/miniwebserver.cpp.orig	2017-06-27 19:02:43.000000000 +0000
+++ src/mongo/util/net/miniwebserver.cpp	2017-07-06 09:42:57.518182256 +0000
@@ -45,6 +45,7 @@
 namespace mongo {
 
 using std::shared_ptr;
+using std::string;
 using std::stringstream;
 using std::vector;
 
